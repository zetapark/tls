#include<catch.hpp>
#include"tls/naes.h"
#include"tls/pss.h"
#include"tls/mpz.h"
#include"tls/sha256.h"
#include"tls/ecdsa.h"
using namespace std;

uint8_t key[32] = {0,}, iv[16] = {0,}, aad[32] = {0,}, src[64], src3[64], src2[64];

TEST_CASE("naes") {
	for(int i=0; i<64; i++) src3[i] = i;
	NettleAes128 aes, aes2;
	GCM<AES> gcm;
	gcm.key(key);
	gcm.iv(iv);
	gcm.iv(src3, 4, 8);
	gcm.xor_with_iv(src3);
	gcm.aad(aad, 32);
	auto a = gcm.encrypt(src, 64);
	gcm.xor_with_iv(src3);
	aes.key(key);
	aes.iv(iv);
	aes.iv(src3, 4, 8);
	aes.xor_with_iv(src3);
	aes.aad(aad, 32);//aad position matter
	auto b = aes.encrypt(src2, 64);
	aes.xor_with_iv(src3);
	REQUIRE(a == b);
	REQUIRE(equal(src, src + 64, src2));
}

TEST_CASE("pss") {
	auto n = 0xbad47a84c1782e4dbdd913f2a261fc8b65838412c6e45a2068ed6d7f16e9cdf4462b39119563cafb74b9cbf25cfd544bdae23bff0ebe7f6441042b7e109b9a8afaa056821ef8efaab219d21d6763484785622d918d395a2a31f2ece8385a8131e5ff143314a82e21afd713bae817cc0ee3514d4839007ccb55d68409c97a18ab62fa6f9f89b3f94a2777c47d6136775a56a9a0127f682470bef831fbec4bcd7b5095a7823fd70745d37d1bf72b63c4b1b4a3d0581e74bf9ade93cc46148617553931a79d92e9e488ef47223ee6f6c061884b13c9065b591139de13c1ea2927491ed00fb793cd68f463f5f64baa53916b46c818ab99706557a1c2d50d232577d1_mpz;
	auto p = 0xe7c9e4b3e5d7ac9e83be08328105356dfeefe222f26c95378effd2150fadf7ba23f5b4705d82e4f1bc45057067c7def73e2100f756ee6d547965fa4f24b85d68867f03d7c886d1dbcca4c589745701b362a1f1417f471d8475b6b7a16a4c48ef1f556edc3f0ff6ba13d365d6e82751f207d91101c8eea1013ccdd9e1de4c387f_mpz;
	auto q = 0xce58602e051f0f4647c4ec57f682e5737fc482a8a1ffac9043bba4fba3387d7dd2154507af1e28bd81b61fcdfe35f9734e0d9b53682ec785f1f6e6224f63d10bf78484b83a4254f333d0fb3f3e9e1834bede52e3078ac279a862fb90af266d7591c81f20b718d07d51bfc221b66a25403b4ac1a68d673fdd959b01ecf3d0a7af_mpz;
	auto e = 0xmpz;
	auto d = 0x40d60f24b61d76783d3bb1dc00b55f96a2a686f59b3750fdb15c40251c370c65cada222673811bc6b305ed7c90ffcb3abdddc8336612ff13b42a75cb7c88fb936291b523d80acce5a0842c724ed85a1393faf3d470bda8083fa84dc5f31499844f0c7c1e93fb1f734a5a29fb31a35c8a0822455f1c850a49e8629714ec6a2657efe75ec1ca6e62f9a3756c9b20b4855bdc9a3ab58c43d8af85b837a7fd15aa1149c119cfe960c05a9d4cea69c9fb6a897145674882bf57241d77c054dc4c94e8349d376296137eb421686159cb878d15d171eda8692834afc871988f203fc822c5dcee7f6c48df663ea3dc755e7dc06aebd41d05f1ca2891e2679783244d068f_mpz;
	auto EM = 0x70992c9d95a4908d2a94b3ab9fa1cd643f120e326f9d7808af50cac42c4b0b4eeb7f0d4df303a568fbfb82b0f58300d25357645721bb71861caf81b27a56082c80a146499fb4eab5bde4493f5d00f1a437bbc360dfcd8056fe6be10e608adb30b6c2f7652428b8d32d362945982a46585d2102ef7995a8ba6e8ad8fd16bd7ae8f53c3d7fcfba290b57ce7f8f09c828d6f2d3ce56f131bd9461e5667e5b73edac77f504dac4f202a9570eb4515b2bf516407db831518db8a2083ec701e8fd387c430bb1a72deca5b49d429cf9deb09cc4518dc5f57c089aa2d3420e567e732102c2c92b88a07c69d70917140ab3823c63f312d3f11fa87ba29da3c7224b4fb4bc_mpz;
	auto S = 0x7e65b998a05f626b028c75dc3fbf98963dce66d0f4c3ae4237cff304d84d8836cb6bad9ac86f9d1b8a28dd70404788b869d2429f1ec0663e51b753f7451c6b4645d99126e457c1dac49551d86a8a974a3131e9b371d5c214cc9ff240c299bd0e62dbc7a9a2dad9fa5404adb00632d36332d5be6106e9e6ec81cac45cd339cc87abbe7f89430800e16e032a66210b25e926eda243d9f09955496ddbc77ef74f17fee41c4435e78b46965b713d72ce8a31af641538add387fedfd88bb22a42eb3bda40f72ecad941dbffdd47b3e77737da741553a45b630d070bcc5205804bf80ee2d51612875dbc4796960052f1687e0074007e6a33ab8b2085c033f9892b6f74_mpz;
	
	int sz = mpz_sizeinbase(n.get_mpz_t(), 256);
	int bits = mpz_sizeinbase(n.get_mpz_t(), 2);
	uint8_t em[sz];
	mpz2bnd(EM, em, em + sz);
	auto v = pss_encode({em, em+sz}, bits - 1);
	REQUIRE(pss_verify({em, em+sz}, v));
}

TEST_CASE("ecdsa") {
	char msg[] = "Example of ECDSA with P-256";
	SHA2 sha2;
	auto z = sha2.hash(msg, msg + sizeof(msg) - 1);//null character!!
	
	EC_Field secp256r1_{
		mpz_class{"0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC"},
		mpz_class{"0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B"}, 
		mpz_class{"0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF"}
	};
	EC_Point G{
		mpz_class{"0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296"},
		mpz_class{"0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5"}, 
		secp256r1_
	};
	mpz_class H{"0xA41A41A12A799548211C410C65D8133AFDE34D28BDD542E4B680CF2899C8A8C4"};
	mpz_class n{"0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551"};
	mpz_class d1{"0xC477F9F65C22CCE20657FAA5B2D1D8122336F851A508A1ED04E479C34985BF96"};
	mpz_class d2{"0xC9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721"};
 	mpz_class k{"0x7A1A7E52797FC8CAAA435D2A4DACE39158504BF204FBE19F14DBB427FAEE50AE"};
 	mpz_class k2{"0x882905F1227FD620FBF2ABF21244F0BA83D0DC3A9103DBBEE43A1FB858109DB4"};

	ECDSA ecdsa{G, n};
	auto P = ecdsa.sign(bnd2mpz(z.begin(), z.end()), d1);
	REQUIRE(ecdsa.verify(bnd2mpz(z.begin(), z.end()), P, G * d1));

	for(int i=0; i<30; i++) {
		auto m0 = random_prime(32);
		auto prv_k = random_prime(32);
		auto P0 = ecdsa.sign(m0, prv_k);
		REQUIRE(ecdsa.verify(m0, P0, prv_k * G));
	}
}

